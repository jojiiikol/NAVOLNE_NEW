# Generated by Django 5.0.1 on 2025-02-09 15:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommissionRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_percentage', models.FloatField(blank=True, null=True)),
                ('max_percentage', models.FloatField(blank=True, null=True)),
                ('commission_rate', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectStatusCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(help_text='Код статуса')),
                ('name', models.CharField(help_text='Название статуса', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название умений', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(blank=True, help_text='Дата рождения пользователя', null=True)),
                ('about', models.CharField(blank=True, help_text='О пользователе', max_length=1000, null=True)),
                ('sex', models.CharField(blank=True, help_text='Пол пользователя. М/Ж', max_length=1, null=True)),
                ('city', models.CharField(blank=True, help_text='Город проживания', max_length=170, null=True)),
                ('company', models.CharField(blank=True, help_text='Компания в которой работает пользователь', max_length=255, null=True)),
                ('passport', models.CharField(blank=True, help_text='Паспортные данные пользователя', max_length=10, null=True)),
                ('document', models.CharField(blank=True, help_text='Документ пользователя', max_length=50, null=True)),
                ('image', models.ImageField(blank=True, default='users/user.png', upload_to='users/')),
                ('money', models.FloatField(blank=True, default=0, help_text='Актнуальный счет пользователя')),
                ('total_money_sent', models.FloatField(blank=True, default=0, help_text='Сколько всего задонатил пользователь')),
                ('confirmed', models.BooleanField(default=False, help_text='Подтвержден дли пользователь в системе')),
                ('email_verified', models.BooleanField(default=False, help_text='Подтверждена ли почта пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('category', models.ManyToManyField(help_text='Интересные категории проектов для пользователя', to='crow.category')),
                ('skill', models.ManyToManyField(help_text='Уменя пользователя', to='crow.skill')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountReplenishment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('status', models.BooleanField(blank=True, null=True)),
                ('idempotence_key', models.UUIDField(blank=True, null=True, unique=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('change_status_date', models.DateTimeField(blank=True, null=True)),
                ('payment_id', models.UUIDField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, null=True)),
                ('payout_token', models.CharField(blank=True, null=True)),
                ('payout_id', models.CharField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, null=True)),
                ('first_name', models.CharField(max_length=255, null=True)),
                ('last_name', models.CharField(max_length=255, null=True)),
                ('about', models.CharField(max_length=1000, null=True)),
                ('sex', models.CharField(max_length=1, null=True)),
                ('city', models.CharField(max_length=170, null=True)),
                ('company', models.CharField(max_length=255, null=True)),
                ('passport', models.CharField(max_length=10, null=True)),
                ('document', models.CharField(max_length=50, null=True)),
                ('image', models.ImageField(blank=True, upload_to='users/')),
                ('description_for_change', models.CharField(max_length=2048, null=True)),
                ('create_date', models.DateField(null=True)),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='change_requests_group', to='auth.group')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='change_requests_profile', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='change_profile_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerProfileChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_description', models.CharField(blank=True, max_length=2048, null=True)),
                ('confirmed', models.BooleanField(default=None, null=True)),
                ('answer_date', models.DateTimeField(null=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='change_profile_admin', to=settings.AUTH_USER_MODEL)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answer_request', to='crow.profilechangerequest')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileConfirmAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1000, null=True)),
                ('confirmed', models.BooleanField()),
                ('answer_time', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirm_profile_answer', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirm_profile_admin', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=27, unique=True)),
                ('small_description', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=1000)),
                ('need_money', models.FloatField()),
                ('collected_money', models.FloatField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('image', models.ImageField(default='project/no_image.jpg', upload_to='project/')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('confirmed', models.BooleanField(default=False)),
                ('closure_type', models.CharField(default='BY_AMOUNT', help_text='Тип закрытия проекта. BY_AMOUNT - закрытие сбора по определенной сумме, BY_TIME - закрытие сбора по истечении времени', max_length=10)),
                ('transfer_allowed', models.BooleanField(default=False, help_text='Поле для разрешения снятии средств с проекта')),
                ('category', models.ManyToManyField(related_name='project_category', to='crow.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('views', models.ManyToManyField(related_name='project_views', to='crow.ip')),
                ('status_code', models.ForeignKey(help_text='Статус код проекта. 0 - не поступил в работу, 1 - в работе, 2 - сбор приостановлен, 3 - в архиве', null=True, on_delete=django.db.models.deletion.CASCADE, to='crow.projectstatuscode')),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='CashingOutProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.FloatField(default=0)),
                ('actual_amount', models.FloatField(default=0)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cashing_out_user', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cashing_out_project', to='crow.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=27)),
                ('small_description', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=1000)),
                ('need_money', models.FloatField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('image', models.ImageField(default='project/no_image.jpg', upload_to='project/')),
                ('description_for_change', models.CharField(blank=True, max_length=2048, null=True)),
                ('create_date', models.DateField(null=True)),
                ('category', models.ManyToManyField(to='crow.category')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='change_requests_project', to='crow.project')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='change_requests_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NewImageToProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='project/')),
                ('project_change_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='add_image', to='crow.projectchangerequest')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerProjectChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_description', models.CharField(blank=True, max_length=2048, null=True)),
                ('confirmed', models.BooleanField(default=None, null=True)),
                ('answer_date', models.DateTimeField(null=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='admin_change_requests_project', to=settings.AUTH_USER_MODEL)),
                ('change_request', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answer_change_requests_project', to='crow.projectchangerequest')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectClosureRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(null=True)),
                ('allowed', models.BooleanField(null=True)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('answer_date', models.DateTimeField(null=True)),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='admin_project_closure', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_closure', to='crow.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectConfirmAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1000, null=True)),
                ('confirmed', models.BooleanField()),
                ('answer_time', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='crow.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_images', to='crow.project')),
            ],
        ),
        migrations.CreateModel(
            name='ResetPasswordToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.FloatField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crow.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
